extends Resource

"""
A material whose maps are generated by blending several `MaterialLayers`

`layers` contains the `MaterialLayers`, each of which
can have multiple channels enabled.
When generating the results, all `LayerTexture`s of each map
are blended together and stored in the `results` `Dictionary`.
It stores the blended `Texture`s with the map names as keys.

To make it possible to use Viewports inside of sub-resources of MaterialLayers,
this and every `Resource` class that is used inside of it has to be local to scene.
"""

export var layers : Array

var results : Dictionary

const TextureLayer = preload("res://layers/texture_layer.gd")
const MaterialLayer = preload("res://layers/material_layer.gd")
const BlendingLayer = preload("res://render_viewports/layer_blending_viewport/layer_blending_viewport.gd").BlendingLayer
const LayerTexture = preload("res://layers/layer_texture.gd")
const FolderLayer = preload("res://layers/folder_layer.gd")

func _init() -> void:
	resource_local_to_scene = true


func update_results(result_size : Vector2, generate_texture_layers := false) -> void:
	var blending_layer_lists := {}
	for map in Globals.TEXTURE_MAP_TYPES:
		blending_layer_lists[map] = []
	for layer in layers:
		add_blend_layers(layer, blending_layer_lists)
	
	for map in Globals.TEXTURE_MAP_TYPES:
		if map == "height":
			map = "normal"
		
		if blending_layer_lists[map].empty():
			results.erase(map)
			return
		
		var result : Texture = yield(LayerBlendViewportManager.blend(
				blending_layer_lists[map], result_size, map.hash()), "completed")
		if map == "normal":
			result = yield(NormalMapGenerationViewport.get_normal_map(result), "completed")
		results[map] = result


func add_blend_layers(layer, blending_layer_lists : Dictionary) -> void:
	if not layer.visible:
		return
	
	if layer is FolderLayer:
		for sub_layer in layer.layers:
			add_blend_layers(sub_layer, blending_layer_lists)
		return
	
	for map in Globals.TEXTURE_MAP_TYPES:
		if not (map in layer.maps and layer.maps[map]):
			continue
		var map_layer_texture : LayerTexture = layer.maps[map]
		
		var blending_layer := BlendingLayer.new()
		if layer.mask:
			blending_layer.mask = layer.mask.result
		blending_layer.code = "texture({0}, UV).rgb"
		blending_layer.uniform_types = ["sampler2D"]
		blending_layer.uniform_values = [map_layer_texture.result]
		blending_layer_lists[map].append(blending_layer)


func export_textures(to_folder : String) -> void:
	for type in results.keys():
		results[type].get_data().save_png(to_folder.plus_file(type) + ".png")


func get_depending_layer_textures(texture_layer : TextureLayer) -> Array:
	var depending_layer_textures := []
	for layer in layers:
		layer = layer as MaterialLayer
		depending_layer_textures += layer.get_depending_layer_textures(texture_layer)
	return depending_layer_textures
